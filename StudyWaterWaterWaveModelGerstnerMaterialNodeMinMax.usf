// This code is to be included in a custom material node based on Nvidia's version of gerstner waves
// https://developer.nvidia.com/gpugems/gpugems/part-i-natural-effects/chapter-1-effective-water-simulation-physical-models
// Inputs and outputs are declared in material node calling this code

// Output (Zero out values to prevent artifacts)
Displacement = float3(0,0,0);
Normal = float3(0,0,0);
HeightFraction = 0;

// Hash Primes To Generate Random(*pseudo*) Waves
int MathHashXPrime = 10007;
int MathHashYPrime = 30270;

// Do Waves
for (int i = 0; i < WaveCount; i++)
{
	// Get Wave Index Fraction
	const float WaveIndexFraction = (float)i / (float)WaveCount;

	// Generate Sequence Of Random(*pseudo*) Numbers From Hash (Called In Sequence)
	MathHashXPrime = (MathHashXPrime) + 12345;
	MathHashYPrime = (MathHashYPrime) + 12345 * 3.2f;
	
	// Get Wave Direction From Random | Lerp With Wind Direction (Normalized)
	float2 WaveDirection = float2(cos((float)MathHashXPrime / 801571.f), sin((float)MathHashYPrime / 10223.f));
	WaveDirection = normalize(lerp(WaveWindDirection, (WaveDirection * 2.f) - 1.f, WaveSpread));
	
	// Wave Alpha | Compute Wave Parameters
	const float WaveAlpha = pow(WaveIndexFraction, WaveDistribution);
	const float Wavelength = lerp(WaveWavelengthMax, WaveWavelengthMin, WaveAlpha);
	const float Steepness = lerp(WaveSteepnessMax, WaveSteepnessMin, WaveAlpha);
	const float Amplitude = lerp(WaveAmplitudeMax, WaveAmplitudeMin, WaveAlpha);

	// Gerstner Wave
	// https://developer.nvidia.com/gpugems/gpugems/part-i-natural-effects/chapter-1-effective-water-simulation-physical-models
	float K = 2.f * PI / Wavelength;
	float wKA = Amplitude * K;
	float Q = Steepness / wKA;
	float WaveSpeed = sqrt(K * 981.f);
	float WavePosition = dot(Position.xy, WaveDirection * K) - (WaveSpeed * Time);
	float WaveSin = sin(WavePosition);
	float WaveCos = cos(WavePosition);

	// Displacement
	Displacement.xy += -Q * WaveSin * WaveDirection * Amplitude;
	Displacement.z += WaveCos * Amplitude;
	
	// Normal (hardcode limit (50) to ensure normal's Z component doesn't exceed a maximum value)
	Normal.xy += WaveSin * wKA * WaveDirection;
	Normal.z += WaveCos * Steepness * saturate((Amplitude * 50.f) / Wavelength);
	
	// Height Fraction
	HeightFraction += WaveCos / WaveCount;
}

// Normalize Our Normal (We also must flip it on z)
Normal = normalize(float3(Normal.x, Normal.y, 1.f - Normal.z));

// Set Height
Height = Displacement.z;